// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#define CLOSEVALUE -0.001

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> gWorldPositionTexture;
RWTexture2D<float> resultShadowTexture;

ByteAddressBuffer modelVertices;
ByteAddressBuffer modelIndices;

int vertexStride;
int indexCount;

Texture2D<float4> modelTexture;
float2 modelTextureSize;

float4x4 worldToObject;
float4x4 objecToWorld;

float3 localLightDirection;

RWStructuredBuffer<float4> debugBuffer;

void LoadVertexData(uint index, out float3 position, out float2 uv) {
    uint pi = index * vertexStride; // index * (3[position.xyz] + 2[uv.xy]) * 4[bytes]
    position = asfloat(modelVertices.Load3(pi + 0));
    uv = asfloat(modelVertices.Load2(pi + (3 * 4)));
}

#define INDEX_FORMAT_16

uint3 loadTriangleIndices(uint nTriangle)
{
#if defined(INDEX_FORMAT_16)
    // stolen from: https://github.com/microsoft/DirectX-Graphics-Samples/blob/master/Samples/Desktop/D3D12Raytracing/src/D3D12RaytracingSimpleLighting/Raytracing.hlsl
    uint offsetBytes = nTriangle * 2;
    uint dwordAlignedOffset = offsetBytes & ~3;
    uint2 four16BitIndices = modelIndices.Load2(dwordAlignedOffset);
    uint3 indices;
    if (dwordAlignedOffset == offsetBytes)
    {
        indices.x = four16BitIndices.x & 0xffff;
        indices.y = (four16BitIndices.x >> 16) & 0xffff;
        indices.z = four16BitIndices.y & 0xffff;
    }
    else
    {
        indices.x = (four16BitIndices.x >> 16) & 0xffff;
        indices.y = four16BitIndices.y & 0xffff;
        indices.z = (four16BitIndices.y >> 16) & 0xffff;
    }
    return indices;
#elif defined(INDEX_FORMAT_32)
    uint offsetBytes = nTriangle * 12;
    return modelIndices.Load3(offsetBytes);
#else
    #error "Must define INDEX_FORMAT_16 or INDEX_FORMAT_32"
#endif
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    float3 worldPosition = (gWorldPositionTexture[id.xy]).xyz;
    float3 localPosition = mul(worldToObject, float4(worldPosition, 1)).xyz;
    
    resultShadowTexture[id.xy] =  0;
    for (int i = 0; i < indexCount; i += 3) {
        // Load index data
        uint3 triIndex = loadTriangleIndices(i); // id * 3[triangle vertices] * 4[bytes]
        
        // Load vertex data
        float3 pointA, pointB, pointC;
        float2 uvA, uvB, uvC;

        LoadVertexData(triIndex.x, pointA, uvA);
        LoadVertexData(triIndex.y, pointB, uvB);
        LoadVertexData(triIndex.z, pointC, uvC);
        
        float3 BAVec = pointB - pointA;
        float3 CAVec = pointC - pointA;
        
        float3 normalRaw = cross(BAVec, CAVec);
        
        // if caster's surface is align to light direction then ignore
        float dotNLocalLight = dot(localLightDirection, normalRaw);
        if (dotNLocalLight > 0)
            continue;
        
        float area = dot(normalRaw, normalRaw);
        float3 normal = normalRaw / sqrt(area);
        
        float planeD = normal.x * pointA.x - normal.y * pointA.y - normal.z * pointA.z;
        
        float3 vec = localPosition - pointA;
        
        // if direction to closest point is opposite to received's surface normal 
        // or too close to receiver's point (consider as same point)
        // then ignore
        float dotVN = dot(vec, normal);
        float t = (dotVN) / dot(-localLightDirection, normal);
        if (t > CLOSEVALUE)
            continue;
        
         // progject receiver's point(pixel) to caster's surface
        float3 snapLocalPosition = localPosition + (localLightDirection * t);

        float3 na = cross(BAVec, snapLocalPosition - pointA);
        float alpha = dot(na, normalRaw) / area;
        if(alpha < 0 || alpha > 1)
            continue;
        
        float3 nb = cross(snapLocalPosition - pointA, CAVec);
        float beta = dot(nb, normalRaw) / area;
        if (beta < 0 || beta > 1)
            continue;
        
        float gamma = 1 - alpha - beta;
        if (gamma < 0 || gamma > 1)
            continue;
        
        resultShadowTexture[id.xy] = 1;
        //// find uv at projected point on surface
        //float un = length(cross(pointA - pointB, pointA - pointC));
        //float ua = length(cross(pointB - snapLocalPosition, pointC - snapLocalPosition)) / un;
        //float ub = length(cross(pointC - snapLocalPosition, pointA - snapLocalPosition)) / un;
        //float uc = length(cross(pointA - snapLocalPosition, pointB - snapLocalPosition)) / un;

        //float2 uv = uvA * ua + uvB * ub + uvC * uc;
        //float alpha = modelTexture[round(uv * modelTextureSize)].w;

        //if(alpha < 1)
        //    return;

        return;
    }
}
